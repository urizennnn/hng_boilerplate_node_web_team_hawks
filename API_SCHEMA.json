{
  "openapi": "3.0.0",
  "info": {
    "title": "HNG Boilerplate API",
    "version": "1.0.0",
    "description": "API documentation for the HNG boilerplate project."
  },
  "servers": [
    {
      "url": "https://hng-boilerplate-node-web-ten.vercel.app/api/v1"
    },
    {
      "url": "http://localhost:3000/api/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Users/Organisations",
      "description": "Operations related to users and organisations"
    },
    {
      "name": "Authentication",
      "description": "Operations related to authentication"
    },
    {
      "name": "Messaging",
      "description": "Operations related to messaging"
    },
    {
      "name": "Blogs",
      "description": "Operations related to blogs"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "allOf": [
          {
            "$ref": "API_SCHEMA_LOGIN.json#/paths/~1auth~1login/post"
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "allOf": [
          {
            "$ref": "API_SCHEMA_LOGIN.json#/paths/~1auth~1register/post"
          }
        ]
      }
    },
    "/permissions": {
      "get": {
        "tags": ["Authentication"],
        "allOf": [
          {
            "$ref": "API_SCHEMA_LOGIN.json#/paths/~1permissions/get"
          }
        ]
      }
    },
    "/email/validate": {
      "post": {
        "tags": ["Messaging"],
        "allOf": [
          {
            "$ref": "messaging.json#/paths/~1email~1validate/post"
          }
        ]
      }
    },
    "/otp/send": {
      "post": {
        "tags": ["Messaging"],
        "allOf": [
          {
            "$ref": "messaging.json#/paths/~1otp~1send/post"
          }
        ]
      }
    },
    "/password/reset": {
      "post": {
        "tags": ["Messaging"],
        "allOf": [
          {
            "$ref": "messaging.json#/paths/~1password~1reset/post"
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": ["Users/Organisations"],
        "summary": "Get all users",
        "description": "Retrieves a list of all users.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User Retrieve"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": ["Users/Organisations"],
        "summary": "Create a new user",
        "description": "Creates a new user account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users/Organisations"],
        "summary": "Get a user by ID",
        "description": "Retrieves a user by their unique ID.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The ID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User retrieve successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "$ref": "#/components/responses/404/content"
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": ["Users/Organisations"],
        "summary": "Update a user",
        "description": "Updates an existing user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID of the user to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "$ref": "#/components/responses/404/content"
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "delete": {
        "tags": ["Users/Organisations"],
        "summary": "Delete a user",
        "description": "Deletes a user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID of the user to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "$ref": "#/components/responses/404/content"
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "tags": ["Users/Organisations"],
        "summary": "Get user organisations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "organisations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Organisation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": ["Users/Organisations"],
        "summary": "Create new organisation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Organisation" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organisation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Organisation" }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/organisations/{orgId}": {
      "get": {
        "tags": ["Users/Organisations"],
        "summary": "Get single organisation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string" },
                    "message": { "type": "string" },
                    "data": { "$ref": "#/components/schemas/Organisation" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organisation not found",
            "content": {
              "$ref": "#/components/responses/404/content"
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organisations/{orgId}/users": {
      "post": {
        "tags": ["Users/Organisations"],
        "summary": "Add user to organisation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User added to organisation successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "message": {
                      "type": "string",
                      "example": "User added to organisation successfully"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },

    "/blogs": {
      "get": {
        "tags": ["Blogs"],
        "allOf": [
          {
            "$ref": "BLOG_SCHEMA.json#/paths/~1blogs/get"
          }
        ]
      },
      "post": {
        "tags": ["Blogs"],
        "allOf": [
          {
            "$ref": "BLOG_SCHEMA.json#/paths/~1blogs/post"
          }
        ]
      }
    },
    "/blogs/{blogId}": {
      "get": {
        "tags": ["Blogs"],
        "allOf": [
          {
            "$ref": "BLOG_SCHEMA.json#/paths/~1blogs~1{blogId}/get"
          }
        ]
      },
      "put": {
        "tags": ["Blogs"],
        "allOf": [
          {
            "$ref": "BLOG_SCHEMA.json#/paths/~1blogs~1{blogId}/put"
          }
        ]
      },
      "delete": {
        "tags": ["Blogs"],
        "allOf": [
          {
            "$ref": "BLOG_SCHEMA.json#/paths/~1blogs~1{blogId}/delete"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the user",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password (bcrypt hash)",
            "pattern": "^\\$2[ayb]\\$.{56}$"
          }
        },
        "required": ["email", "lastName", "password"]
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the organisation",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Organisation's name"
          },
          "description": {
            "type": "string",
            "description": "Organisation's description"
          }
        },
        "required": ["name"]
      },
      "Blog": {
        "$ref": "BLOG_SCHEMA.json#/components/schemas/Blog"
      },
      "ActivityLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["action", "userId"]
      }
    },
    "responses": {
      "422": {
        "description": "Validation Errors",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "field": "string",
                      "message": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Client error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "message": {
                  "type": "string",
                  "example": "Client error"
                },
                "statusCode": {
                  "type": "number",
                  "example": 400
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Error"
                },
                "message": {
                  "type": "string",
                  "example": "Error Fetching ..."
                },
                "statusCode": {
                  "type": "number",
                  "example": "500"
                }
              }
            }
          }
        }
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "not found"
                },
                "message": {
                  "type": "string",
                  "example": "... not found"
                },
                "statusCode": {
                  "type": "number",
                  "example": 404
                }
              }
            }
          }
        }
      }
    }
  }
}
